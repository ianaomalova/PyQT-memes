from PyQt6.QtCore import QThread, pyqtSignal, Qt, QPoint, QRect
from PyQt6.QtGui import QPixmap
from PyQt6.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QLineEdit
import requests
import api
import styles
#–ö–ª–∞—Å—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏. –ó–∞—Ö–æ—Ç–µ–ª –∫–Ω–æ–ø–æ—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Å–∞–º–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —É–≥–ª—É –∫–∞—Ä—Ç–∏–Ω–∫–∏, –µ—Å–ª–∏ –ø–æ–¥–≤–µ—Å—Ç–∏ –º—ã—à–∫—É
class HoverLabel(QLabel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMouseTracking(True)
        self.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.setStyleSheet("border: 1px solid #ddd; border-radius: 8px; background: #f9f9f9;")
# —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –∑–¥–µ—Å—å —ç—Ç–æ –∏ —Ä–µ–∞–ª–∏–∑—É—é —á–µ—Ä–µ–∑ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
    def mouseMoveEvent(self, event):
        mouse_pos = event.position().toPoint()
        button_zone = QRect(self.width() - 60, 0, 60, 60)
        parent = self.parent()

        if parent and hasattr(parent, 'clear_button'):
            has_image = getattr(parent, 'has_image', False)

            if button_zone.contains(mouse_pos) and has_image: #has_image - —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –Ω–µ –±—ã–ª–æ, –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç
                parent.clear_button.setVisible(True)
            else:
                parent.clear_button.setVisible(False)

        super().mouseMoveEvent(event)

class ImageLoader(QThread):
    def __init__(self, text: str):
        super().__init__()
        self.text = text

    finished = pyqtSignal(bytes)
    error = pyqtSignal(str)
    def run(self):
        response = requests.get(api.CAT_URL + self.text)
        if response.status_code == 200:
            self.finished.emit(response.content)
        else: self.error.emit(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")


class PageOne(QWidget):
    def __init__(self):
        super().__init__()

        layout = QVBoxLayout(self)
        
        self.input = QLineEdit()
        self.input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞")
        self.button = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
        self.button.setStyleSheet(styles.load_buttons)
        self.image_label = HoverLabel(self) #—Ç—É—Ç —Ç–æ–∂–µ –ø–æ–º–µ–Ω—è–ª –Ω–∞ —Å–≤–æ–π label
        self.image_label.setScaledContents(True)

        layout.addWidget(self.input)
        layout.addWidget(self.button)
        layout.addWidget(self.image_label)
        self.input.setObjectName("statusInput")
        self.input.setStyleSheet(styles.input_status)

        self.button.clicked.connect(self.load_image)
        self.input.returnPressed.connect(self.load_image) #—è —Ñ–∞–Ω–∞—Ç —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–µ–π —Ç—ã–∫–∞–ª–∏—Å—å –ø–æ Enter

        self.clear_button=QPushButton("‚ùå", self.image_label)

        self.setStyleSheet(styles.delete_image)
        self.clear_button.clicked.connect(self.clear_image)
        self.clear_button.setVisible(False)
        self.image_label.resizeEvent = lambda event: self.clear_button.move(self.image_label.width() - 50, 8) #—à–∏–∫–∞—Ä–Ω—É—é —Å—Ç—Ä–æ—á–∫—É –Ω–∞—à—ë–ª, —ç—Ç–æ —á—Ç–æ–±—ã –∫—Ä–µ—Å—Ç–∏–∫ –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ

    def clear_image(self):
        self.image_label.setPixmap(QPixmap())  # –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        self.has_image = False  #–§–ª–∞–≥, —á—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç
        self.clear_button.setVisible(False)  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É

    def load_image(self):
        text = self.input.text().strip()
        if not text.isdigit():
            self.show_error("–ß–µ–≥–æ –≤–≤–æ–¥–∏—à—å? –ö–æ–¥ –æ—à–∏–±–∫–∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ–µ—Ä–æ–∫ O.O") #—Ç—É—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–æ–∫ –ø–∏—à—É
            return
        code = int(text)
        if code not in api.SUPPORTED_CODES:
            self.show_error(f"–ö–æ–¥–∞ –æ—à–∏–±–∫–∏ {code} –Ω–µ—Ç üòë") #—Ç–∞–∫–æ–π –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            return
        self.button.setEnabled(False)
        self.button.setText("–ó–∞–≥—Ä—É–∂–∞—é...")
        self.thread = ImageLoader(text)
        self.thread.finished.connect(self.display_image)
        self.thread.error.connect(self.handle_error)
        self.thread.start()

    def display_image(self, data: bytes):
        pixmap = QPixmap()
        pixmap.loadFromData(data)
        self.image_label.setPixmap(pixmap)
        self.button.setEnabled(True)
        self.has_image = True  # –°—Ç–∞–≤–ª—é —Ñ–ª–∞–≥, —á—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –µ—Å—Ç—å
        self.button.setText("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
    #—Å–¥–µ–ª–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –æ—Ç –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞ –ø–æ —Ç–∏–ø—É 2000 –Ω–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞–ª–æ—Å—å
    def handle_error(self, error_message: str):
            self.button.setEnabled(True)
            self.button.setText("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
            self.show_error(error_message)

    def show_error(self, message: str):

        self.image_label.setText(message)
        self.has_image = False
        self.clear_button.setVisible(False)
        self.image_label.update()
